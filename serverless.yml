# NOTE: update this with your service name
service: posts-ts-api-april

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    POSTS_TABLENAME: posts
    COMMENT_TABLENAME: comments

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

custom:
  serverless-offline:
    httpPort: 4000

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  getReviewsByUser:
    handler: src/services/posts/posts.getPostsByUser
    events:
      - http:
          path: posts/user/{userId}
          cors: true
          method: get
  createPost:
    handler: src/services/posts/posts.createPost
    events:
      - http:
          path: posts
          method: post
          cors: true
          # authorizer: aws_iam
  deletePost:
    handler: src/services/posts/posts.deletePost
    events:
      - http:
          path: posts/{postId}
          method: delete
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          # authorizer: aws_iam
  getAllPosts:
    handler: src/services/posts/posts.getAllPosts
    events:
      - http:
          path: posts
          method: get
          cors: true
  getOnePost:
    handler: src/services/posts/posts.getOnePost
    events:
      - http:
          path: post/{postId}
          method: get
          cors: true
  getCommentByUser:
    handler: src/services/comments/comments.getCommentByUser
    events:
      - http:
          path: comments/user/{userId}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          method: get
  createComment:
    handler: src/services/comments/comments.createComment
    events:
      - http:
          path: comments
          method: post
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  deleteComment:
    handler: src/services/comments/comments.deleteComment
    events:
      - http:
          path: comments/{commentId}
          method: delete
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateComment:
    handler: src/services/comments/comments.updateComment
    events:
      - http:
          path: comments/{commentId}
          method: patch
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getAllComments:
    handler: src/services/comments/comments.getAllComments
    events:
      - http:
          path: comments
          method: get
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getOneComment:
    handler: src/services/comments/comments.getOneComment
    events:
      - http:
          path: comment/{commentId}
          method: get
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    posts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: posts
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    comments:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: comments
        AttributeDefinitions:
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

